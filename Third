{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1299795,"sourceType":"datasetVersion","datasetId":751906},{"sourceId":171936275,"sourceType":"kernelVersion"},{"sourceId":172064346,"sourceType":"kernelVersion"},{"sourceId":172280211,"sourceType":"kernelVersion"}],"dockerImageVersionId":30683,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install wurlitzer\n!pip install tensorflow-decision-forests\n!pip install numpy\n!pip install nibabel\n!pip install tensorflow\n!pip install matplotlib\n!pip install tifffile\nimport numpy as np\nimport nibabel as nib\nimport glob\nfrom tensorflow.keras.utils import to_categorical\nimport matplotlib.pyplot as plt\nfrom tifffile import imwrite\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-16T11:17:32.831576Z","iopub.execute_input":"2024-04-16T11:17:32.831888Z","iopub.status.idle":"2024-04-16T11:19:14.871030Z","shell.execute_reply.started":"2024-04-16T11:17:32.831861Z","shell.execute_reply":"2024-04-16T11:19:14.870064Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting wurlitzer\n  Downloading wurlitzer-3.0.3-py3-none-any.whl.metadata (1.9 kB)\nDownloading wurlitzer-3.0.3-py3-none-any.whl (7.3 kB)\nInstalling collected packages: wurlitzer\nSuccessfully installed wurlitzer-3.0.3\nRequirement already satisfied: tensorflow-decision-forests in /opt/conda/lib/python3.10/site-packages (1.8.1)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (1.26.4)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (2.1.4)\nRequirement already satisfied: tensorflow~=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (2.15.0)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (1.16.0)\nRequirement already satisfied: absl-py in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (1.4.0)\nRequirement already satisfied: wheel in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (0.42.0)\nRequirement already satisfied: wurlitzer in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests) (3.0.3)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (1.6.3)\nRequirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (23.5.26)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (0.5.4)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (0.2.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (3.10.0)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (16.0.6)\nRequirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (0.2.0)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (3.3.0)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (21.3)\nRequirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (3.20.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (69.0.3)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (2.4.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (4.9.0)\nRequirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (1.14.1)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (0.35.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (1.51.1)\nRequirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (2.15.1)\nRequirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow~=2.15.0->tensorflow-decision-forests) (2.15.0)\nCollecting keras<2.16,>=2.15.0 (from tensorflow~=2.15.0->tensorflow-decision-forests)\n  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->tensorflow-decision-forests) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->tensorflow-decision-forests) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->tensorflow-decision-forests) (2023.4)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (2.26.1)\nRequirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (1.2.0)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (3.5.2)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (2.31.0)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (3.0.2)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow~=2.15.0->tensorflow-decision-forests) (3.1.1)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (4.2.4)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (0.3.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (4.9)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (1.3.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (2024.2.2)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (2.1.3)\nRequirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (0.5.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow~=2.15.0->tensorflow-decision-forests) (3.2.2)\nDownloading keras-2.15.0-py3-none-any.whl (1.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m27.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: keras\n  Attempting uninstall: keras\n    Found existing installation: keras 3.1.1\n    Uninstalling keras-3.1.1:\n      Successfully uninstalled keras-3.1.1\nSuccessfully installed keras-2.15.0\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\nRequirement already satisfied: nibabel in /opt/conda/lib/python3.10/site-packages (5.2.1)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from nibabel) (1.26.4)\nRequirement already satisfied: packaging>=17 in /opt/conda/lib/python3.10/site-packages (from nibabel) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=17->nibabel) (3.1.1)\nRequirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.15.0)\nRequirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\nRequirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (23.5.26)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.10.0)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (16.0.6)\nRequirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\nRequirement already satisfied: numpy<2.0.0,>=1.23.5 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.26.4)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)\nRequirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (69.0.3)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.9.0)\nRequirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.14.1)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.35.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.51.1)\nRequirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.1)\nRequirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.0)\nRequirement already satisfied: keras<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.0)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.42.0)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.26.1)\nRequirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.5.2)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.2)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow) (3.1.1)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.2.4)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.3.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.3)\nRequirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.5.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\nRequirement already satisfied: tifffile in /opt/conda/lib/python3.10/site-packages (2023.12.9)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from tifffile) (1.26.4)\n","output_type":"stream"},{"name":"stderr","text":"2024-04-16 11:19:03.216795: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-16 11:19:03.216945: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-16 11:19:03.346845: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"TRAIN_DATASET_PATH = \"/kaggle/input/brats20-dataset-training-validation/BraTS2020_TrainingData/MICCAI_BraTS2020_TrainingData\"\n#VALIDATION_DATASET_PATH = 'BraTS2020_ValidationData/MICCAI_BraTS2020_ValidationData'\ntest_image_flair = nib.load(TRAIN_DATASET_PATH + \"/BraTS20_Training_002/BraTS20_Training_002_flair.nii\").get_fdata()\nprint(test_image_flair.max())\n#Scalers are applied to 1D so let us reshape and then reshape back to original shape. \ntest_image_flair=scaler.fit_transform(test_image_flair.reshape(-1, test_image_flair.shape[-1])).reshape(test_image_flair.shape)\n\n\ntest_image_t1=nib.load(TRAIN_DATASET_PATH + \"/BraTS20_Training_002/BraTS20_Training_002_t1.nii\").get_fdata()\ntest_image_t1=scaler.fit_transform(test_image_t1.reshape(-1, test_image_t1.shape[-1])).reshape(test_image_t1.shape)\n\ntest_image_t1ce=nib.load(TRAIN_DATASET_PATH + \"/BraTS20_Training_002/BraTS20_Training_002_t1ce.nii\").get_fdata()\ntest_image_t1ce=scaler.fit_transform(test_image_t1ce.reshape(-1, test_image_t1ce.shape[-1])).reshape(test_image_t1ce.shape)\n\ntest_image_t2=nib.load(TRAIN_DATASET_PATH + \"/BraTS20_Training_002/BraTS20_Training_002_t2.nii\").get_fdata()\ntest_image_t2=scaler.fit_transform(test_image_t2.reshape(-1, test_image_t2.shape[-1])).reshape(test_image_t2.shape)\n\ntest_mask=nib.load(TRAIN_DATASET_PATH + \"/BraTS20_Training_002/BraTS20_Training_002_seg.nii\").get_fdata()\ntest_mask=test_mask.astype(np.uint8)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:19:14.872594Z","iopub.execute_input":"2024-04-16T11:19:14.873317Z","iopub.status.idle":"2024-04-16T11:19:16.249527Z","shell.execute_reply.started":"2024-04-16T11:19:14.873290Z","shell.execute_reply":"2024-04-16T11:19:16.248526Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"1091.0\n","output_type":"stream"}]},{"cell_type":"code","source":"print(np.unique(test_mask))  #0, 1, 2, 4 (Need to reencode to 0, 1, 2, 3)\ntest_mask[test_mask==4] = 3  #Reassign mask values 4 to 3\nprint(np.unique(test_mask)) \n\nimport random\nn_slice=random.randint(0, test_mask.shape[2])\n\nplt.figure(figsize=(12, 8))\n\nplt.subplot(231)\nplt.imshow(test_image_flair[:,:,n_slice], cmap='gray')\nplt.title('Image flair')\nplt.subplot(232)\nplt.imshow(test_image_t1[:,:,n_slice], cmap='gray')\nplt.title('Image t1')\nplt.subplot(233)\nplt.imshow(test_image_t1ce[:,:,n_slice], cmap='gray')\nplt.title('Image t1ce')\nplt.subplot(234)\nplt.imshow(test_image_t2[:,:,n_slice], cmap='gray')\nplt.title('Image t2')\nplt.subplot(235)\nplt.imshow(test_mask[:,:,n_slice])\nplt.title('Mask')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:19:16.250751Z","iopub.execute_input":"2024-04-16T11:19:16.251039Z","iopub.status.idle":"2024-04-16T11:19:17.547398Z","shell.execute_reply.started":"2024-04-16T11:19:16.251017Z","shell.execute_reply":"2024-04-16T11:19:17.546510Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"[0 1 2 4]\n[0 1 2 3]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 5 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"combined_x = np.stack([test_image_flair, test_image_t1ce, test_image_t2], axis=3)\n\n#Crop to a size to be divisible by 64 so we can later extract 64x64x64 patches. \n#cropping x, y, and z\n#combined_x=combined_x[24:216, 24:216, 13:141]\n\ncombined_x=combined_x[56:184, 56:184, 13:141] #Crop to 128x128x128x4\n\n#Do the same for mask\ntest_mask = test_mask[56:184, 56:184, 13:141]\n\nn_slice=random.randint(0, test_mask.shape[2])\nplt.figure(figsize=(12, 8))\n\nplt.subplot(221)\nplt.imshow(combined_x[:,:,n_slice, 0], cmap='gray')\nplt.title('Image flair')\nplt.subplot(222)\nplt.imshow(combined_x[:,:,n_slice, 1], cmap='gray')\nplt.title('Image t1ce')\nplt.subplot(223)\nplt.imshow(combined_x[:,:,n_slice, 2], cmap='gray')\nplt.title('Image t2')\nplt.subplot(224)\nplt.imshow(test_mask[:,:,n_slice])\nplt.title('Mask')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:19:17.549402Z","iopub.execute_input":"2024-04-16T11:19:17.549715Z","iopub.status.idle":"2024-04-16T11:19:18.450175Z","shell.execute_reply.started":"2024-04-16T11:19:17.549689Z","shell.execute_reply":"2024-04-16T11:19:18.449222Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 4 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from tifffile import imwrite\nimport os\n\n# Define paths in Kaggle environment\noutput_dir = '/kaggle/working/'  # Output directory on Kaggle\n\n# Write files using Kaggle file system paths\noutput_tiff_path = os.path.join(output_dir, 'combined255.tif')\noutput_npy_path = os.path.join(output_dir, 'combined255.npy')\n\n# Write files using Kaggle file system paths\nimwrite(output_tiff_path, combined_x)\nnp.save(output_npy_path, combined_x)\n\n# Verify image is being read properly (only for demonstration, not necessary)\n# my_img = imread(output_tiff_path)\n\n#Verify image is being read properly\n#my_img=imread('BraTS2020_TrainingData/combined255.tif')\n\nmy_img=np.load('/kaggle/working/combined255.npy')\n\ntest_mask = to_categorical(test_mask, num_classes=4)\n####################################################################\n#####################################\n#End of understanding the dataset. Now get it organized.\n#####################################\n\n#Now let us apply the same as above to all the images...\n#Merge channels, crop, patchify, save\n#GET DATA READY =  GENERATORS OR OTHERWISE\n\n#Keras datagenerator does ntot support 3d\n\n# # # images lists harley\n#t1_list = sorted(glob.glob('BraTS2020_TrainingData/MICCAI_BraTS2020_TrainingData/*/*t1.nii'))\n# Load combined data from output folder\n\n# List image and mask files using Kaggle file system paths\nt2_list = sorted(glob.glob('/kaggle/input/brats20-dataset-training-validation/BraTS2020_TrainingData/MICCAI_BraTS2020_TrainingData/*/*t2.nii'))\nt1ce_list = sorted(glob.glob('/kaggle/input/brats20-dataset-training-validation/BraTS2020_TrainingData/MICCAI_BraTS2020_TrainingData/*/*t1ce.nii'))\nflair_list = sorted(glob.glob('/kaggle/input/brats20-dataset-training-validation/BraTS2020_TrainingData/MICCAI_BraTS2020_TrainingData/*/*flair.nii'))\nmask_list = sorted(glob.glob('/kaggle/input/brats20-dataset-training-validation/BraTS2020_TrainingData/MICCAI_BraTS2020_TrainingData/*/*seg.nii'))\n\n\n#Each volume generates 18 64x64x64x4 sub-volumes. \n#Total 369 volumes = 6642 sub volumes","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:19:18.451353Z","iopub.execute_input":"2024-04-16T11:19:18.451645Z","iopub.status.idle":"2024-04-16T11:19:21.110871Z","shell.execute_reply.started":"2024-04-16T11:19:18.451621Z","shell.execute_reply":"2024-04-16T11:19:21.109895Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import os\n\n# Create directories for images and masks\noutput_dir = '/kaggle/working/input_data_3channels'\nos.makedirs(os.path.join(output_dir, 'masks'), exist_ok=True)\n\n# Iterate over the lists\nfor img in range(len(t2_list)):\n    print(\"Now preparing masks number: \", img)\n      \n    # Load and preprocess image and mask data\n    temp_image_t2 = nib.load(t2_list[img]).get_fdata()\n    temp_image_t2 = scaler.fit_transform(temp_image_t2.reshape(-1, temp_image_t2.shape[-1])).reshape(temp_image_t2.shape)\n   \n    temp_image_t1ce = nib.load(t1ce_list[img]).get_fdata()\n    temp_image_t1ce = scaler.fit_transform(temp_image_t1ce.reshape(-1, temp_image_t1ce.shape[-1])).reshape(temp_image_t1ce.shape)\n   \n    temp_image_flair = nib.load(flair_list[img]).get_fdata()\n    temp_image_flair = scaler.fit_transform(temp_image_flair.reshape(-1, temp_image_flair.shape[-1])).reshape(temp_image_flair.shape)\n        \n    temp_mask = nib.load(mask_list[img]).get_fdata()\n    temp_mask = temp_mask.astype(np.uint8)\n    temp_mask[temp_mask==4] = 3  # Reassign mask values 4 to 3\n    \n    temp_combined_images = np.stack([temp_image_flair, temp_image_t1ce, temp_image_t2], axis=3)\n    \n    # Crop images and masks\n    temp_combined_images = temp_combined_images[56:184, 56:184, 13:141]\n    temp_mask = temp_mask[56:184, 56:184, 13:141]\n    \n    val, counts = np.unique(temp_mask, return_counts=True)\n    \n    if (1 - (counts[0]/counts.sum())) > 0.01:  # At least 1% useful volume with labels that are not 0\n        print(\"Save Me\")\n        temp_mask = to_categorical(temp_mask, num_classes=4)\n        # Save processed data to output folder\n        np.save(os.path.join(output_dir, 'masks', 'mask_' + str(img) + '.npy'), temp_mask)\n        \n    else:\n        print(\"I am useless\")  ","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:19:21.111901Z","iopub.execute_input":"2024-04-16T11:19:21.112159Z","iopub.status.idle":"2024-04-16T11:28:29.842917Z","shell.execute_reply.started":"2024-04-16T11:19:21.112137Z","shell.execute_reply":"2024-04-16T11:28:29.840717Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Now preparing masks number:  0\nSave Me\nNow preparing masks number:  1\nSave Me\nNow preparing masks number:  2\nSave Me\nNow preparing masks number:  3\nSave Me\nNow preparing masks number:  4\nI am useless\nNow preparing masks number:  5\nSave Me\nNow preparing masks number:  6\nSave Me\nNow preparing masks number:  7\nSave Me\nNow preparing masks number:  8\nSave Me\nNow preparing masks number:  9\nSave Me\nNow preparing masks number:  10\nSave Me\nNow preparing masks number:  11\nSave Me\nNow preparing masks number:  12\nSave Me\nNow preparing masks number:  13\nSave Me\nNow preparing masks number:  14\nSave Me\nNow preparing masks number:  15\nSave Me\nNow preparing masks number:  16\nSave Me\nNow preparing masks number:  17\nSave Me\nNow preparing masks number:  18\nSave Me\nNow preparing masks number:  19\nSave Me\nNow preparing masks number:  20\nSave Me\nNow preparing masks number:  21\nSave Me\nNow preparing masks number:  22\nSave Me\nNow preparing masks number:  23\nSave Me\nNow preparing masks number:  24\nSave Me\nNow preparing masks number:  25\nSave Me\nNow preparing masks number:  26\nSave Me\nNow preparing masks number:  27\nI am useless\nNow preparing masks number:  28\nSave Me\nNow preparing masks number:  29\nSave Me\nNow preparing masks number:  30\nSave Me\nNow preparing masks number:  31\nSave Me\nNow preparing masks number:  32\nSave Me\nNow preparing masks number:  33\nSave Me\nNow preparing masks number:  34\nSave Me\nNow preparing masks number:  35\nI am useless\nNow preparing masks number:  36\nSave Me\nNow preparing masks number:  37\nSave Me\nNow preparing masks number:  38\nSave Me\nNow preparing masks number:  39\nSave Me\nNow preparing masks number:  40\nSave Me\nNow preparing masks number:  41\nSave Me\nNow preparing masks number:  42\nSave Me\nNow preparing masks number:  43\nI am useless\nNow preparing masks number:  44\nSave Me\nNow preparing masks number:  45\nSave Me\nNow preparing masks number:  46\nSave Me\nNow preparing masks number:  47\nSave Me\nNow preparing masks number:  48\nSave Me\nNow preparing masks number:  49\nSave Me\nNow preparing masks number:  50\nSave Me\nNow preparing masks number:  51\nSave Me\nNow preparing masks number:  52\nSave Me\nNow preparing masks number:  53\nSave Me\nNow preparing masks number:  54\nSave Me\nNow preparing masks number:  55\nSave Me\nNow preparing masks number:  56\nSave Me\nNow preparing masks number:  57\nSave Me\nNow preparing masks number:  58\nSave Me\nNow preparing masks number:  59\nSave Me\nNow preparing masks number:  60\nI am useless\nNow preparing masks number:  61\nSave Me\nNow preparing masks number:  62\nI am useless\nNow preparing masks number:  63\nSave Me\nNow preparing masks number:  64\nSave Me\nNow preparing masks number:  65\nSave Me\nNow preparing masks number:  66\nSave Me\nNow preparing masks number:  67\nSave Me\nNow preparing masks number:  68\nSave Me\nNow preparing masks number:  69\nSave Me\nNow preparing masks number:  70\nSave Me\nNow preparing masks number:  71\nSave Me\nNow preparing masks number:  72\nSave Me\nNow preparing masks number:  73\nSave Me\nNow preparing masks number:  74\nSave Me\nNow preparing masks number:  75\nSave Me\nNow preparing masks number:  76\nSave Me\nNow preparing masks number:  77\nSave Me\nNow preparing masks number:  78\nI am useless\nNow preparing masks number:  79\nSave Me\nNow preparing masks number:  80\nSave Me\nNow preparing masks number:  81\nI am useless\nNow preparing masks number:  82\nSave Me\nNow preparing masks number:  83\nSave Me\nNow preparing masks number:  84\nSave Me\nNow preparing masks number:  85\nI am useless\nNow preparing masks number:  86\nSave Me\nNow preparing masks number:  87\nSave Me\nNow preparing masks number:  88\nSave Me\nNow preparing masks number:  89\nSave Me\nNow preparing masks number:  90\nSave Me\nNow preparing masks number:  91\nSave Me\nNow preparing masks number:  92\nSave Me\nNow preparing masks number:  93\nSave Me\nNow preparing masks number:  94\nSave Me\nNow preparing masks number:  95\nSave Me\nNow preparing masks number:  96\nSave Me\nNow preparing masks number:  97\nSave Me\nNow preparing masks number:  98\nI am useless\nNow preparing masks number:  99\nSave Me\nNow preparing masks number:  100\nSave Me\nNow preparing masks number:  101\nSave Me\nNow preparing masks number:  102\nSave Me\nNow preparing masks number:  103\nSave Me\nNow preparing masks number:  104\nSave Me\nNow preparing masks number:  105\nSave Me\nNow preparing masks number:  106\nSave Me\nNow preparing masks number:  107\nI am useless\nNow preparing masks number:  108\nSave Me\nNow preparing masks number:  109\nI am useless\nNow preparing masks number:  110\nSave Me\nNow preparing masks number:  111\nSave Me\nNow preparing masks number:  112\nSave Me\nNow preparing masks number:  113\nSave Me\nNow preparing masks number:  114\nSave Me\nNow preparing masks number:  115\nSave Me\nNow preparing masks number:  116\nSave Me\nNow preparing masks number:  117\nSave Me\nNow preparing masks number:  118\nSave Me\nNow preparing masks number:  119\nSave Me\nNow preparing masks number:  120\nSave Me\nNow preparing masks number:  121\nI am useless\nNow preparing masks number:  122\nSave Me\nNow preparing masks number:  123\nSave Me\nNow preparing masks number:  124\nSave Me\nNow preparing masks number:  125\nSave Me\nNow preparing masks number:  126\nSave Me\nNow preparing masks number:  127\nSave Me\nNow preparing masks number:  128\nSave Me\nNow preparing masks number:  129\nSave Me\nNow preparing masks number:  130\nSave Me\nNow preparing masks number:  131\nSave Me\nNow preparing masks number:  132\nSave Me\nNow preparing masks number:  133\nSave Me\nNow preparing masks number:  134\nSave Me\nNow preparing masks number:  135\nSave Me\nNow preparing masks number:  136\nSave Me\nNow preparing masks number:  137\nSave Me\nNow preparing masks number:  138\nI am useless\nNow preparing masks number:  139\nSave Me\nNow preparing masks number:  140\nSave Me\nNow preparing masks number:  141\nI am useless\nNow preparing masks number:  142\nSave Me\nNow preparing masks number:  143\nSave Me\nNow preparing masks number:  144\nSave Me\nNow preparing masks number:  145\nSave Me\nNow preparing masks number:  146\nSave Me\nNow preparing masks number:  147\nSave Me\nNow preparing masks number:  148\nSave Me\nNow preparing masks number:  149\nSave Me\nNow preparing masks number:  150\nSave Me\nNow preparing masks number:  151\nSave Me\nNow preparing masks number:  152\nSave Me\nNow preparing masks number:  153\nSave Me\nNow preparing masks number:  154\nSave Me\nNow preparing masks number:  155\nSave Me\nNow preparing masks number:  156\nSave Me\nNow preparing masks number:  157\nSave Me\nNow preparing masks number:  158\nSave Me\nNow preparing masks number:  159\nSave Me\nNow preparing masks number:  160\nSave Me\nNow preparing masks number:  161\nSave Me\nNow preparing masks number:  162\nSave Me\nNow preparing masks number:  163\nSave Me\nNow preparing masks number:  164\nSave Me\nNow preparing masks number:  165\nSave Me\nNow preparing masks number:  166\nSave Me\nNow preparing masks number:  167\nSave Me\nNow preparing masks number:  168\nSave Me\nNow preparing masks number:  169\nSave Me\nNow preparing masks number:  170\nSave Me\nNow preparing masks number:  171\nSave Me\nNow preparing masks number:  172\nSave Me\nNow preparing masks number:  173\nSave Me\nNow preparing masks number:  174\nSave Me\nNow preparing masks number:  175\nSave Me\nNow preparing masks number:  176\nI am useless\nNow preparing masks number:  177\nSave Me\nNow preparing masks number:  178\nSave Me\nNow preparing masks number:  179\nSave Me\nNow preparing masks number:  180\nSave Me\nNow preparing masks number:  181\nSave Me\nNow preparing masks number:  182\nSave Me\nNow preparing masks number:  183\nSave Me\nNow preparing masks number:  184\nSave Me\nNow preparing masks number:  185\nSave Me\nNow preparing masks number:  186\nSave Me\nNow preparing masks number:  187\nSave Me\nNow preparing masks number:  188\nSave Me\nNow preparing masks number:  189\nSave Me\nNow preparing masks number:  190\nSave Me\nNow preparing masks number:  191\nSave Me\nNow preparing masks number:  192\nSave Me\nNow preparing masks number:  193\nSave Me\nNow preparing masks number:  194\nSave Me\nNow preparing masks number:  195\nSave Me\nNow preparing masks number:  196\nSave Me\nNow preparing masks number:  197\nSave Me\nNow preparing masks number:  198\nSave Me\nNow preparing masks number:  199\nSave Me\nNow preparing masks number:  200\nSave Me\nNow preparing masks number:  201\nSave Me\nNow preparing masks number:  202\nSave Me\nNow preparing masks number:  203\nI am useless\nNow preparing masks number:  204\nSave Me\nNow preparing masks number:  205\nSave Me\nNow preparing masks number:  206\nSave Me\nNow preparing masks number:  207\nSave Me\nNow preparing masks number:  208\nSave Me\nNow preparing masks number:  209\nSave Me\nNow preparing masks number:  210\nSave Me\nNow preparing masks number:  211\nSave Me\nNow preparing masks number:  212\nSave Me\nNow preparing masks number:  213\nSave Me\nNow preparing masks number:  214\nSave Me\nNow preparing masks number:  215\nSave Me\nNow preparing masks number:  216\nI am useless\nNow preparing masks number:  217\nSave Me\nNow preparing masks number:  218\nSave Me\nNow preparing masks number:  219\nSave Me\nNow preparing masks number:  220\nSave Me\nNow preparing masks number:  221\nSave Me\nNow preparing masks number:  222\nSave Me\nNow preparing masks number:  223\nSave Me\nNow preparing masks number:  224\nSave Me\nNow preparing masks number:  225\nSave Me\nNow preparing masks number:  226\nSave Me\nNow preparing masks number:  227\nSave Me\nNow preparing masks number:  228\nSave Me\nNow preparing masks number:  229\nSave Me\nNow preparing masks number:  230\nSave Me\nNow preparing masks number:  231\nSave Me\nNow preparing masks number:  232\nI am useless\nNow preparing masks number:  233\nSave Me\nNow preparing masks number:  234\nSave Me\nNow preparing masks number:  235\nSave Me\nNow preparing masks number:  236\nSave Me\nNow preparing masks number:  237\nSave Me\nNow preparing masks number:  238\nSave Me\nNow preparing masks number:  239\nSave Me\nNow preparing masks number:  240\nSave Me\nNow preparing masks number:  241\nSave Me\nNow preparing masks number:  242\nSave Me\nNow preparing masks number:  243\nSave Me\nNow preparing masks number:  244\nSave Me\nNow preparing masks number:  245\nSave Me\nNow preparing masks number:  246\nSave Me\nNow preparing masks number:  247\nSave Me\nNow preparing masks number:  248\nSave Me\nNow preparing masks number:  249\nSave Me\nNow preparing masks number:  250\nSave Me\nNow preparing masks number:  251\nSave Me\nNow preparing masks number:  252\nSave Me\nNow preparing masks number:  253\nSave Me\nNow preparing masks number:  254\nSave Me\nNow preparing masks number:  255\nSave Me\nNow preparing masks number:  256\nSave Me\nNow preparing masks number:  257\nSave Me\nNow preparing masks number:  258\nSave Me\nNow preparing masks number:  259\nSave Me\nNow preparing masks number:  260\nSave Me\nNow preparing masks number:  261\nSave Me\nNow preparing masks number:  262\nSave Me\nNow preparing masks number:  263\nSave Me\nNow preparing masks number:  264\nSave Me\nNow preparing masks number:  265\nSave Me\nNow preparing masks number:  266\nSave Me\nNow preparing masks number:  267\nI am useless\nNow preparing masks number:  268\nSave Me\nNow preparing masks number:  269\nSave Me\nNow preparing masks number:  270\nSave Me\nNow preparing masks number:  271\nSave Me\nNow preparing masks number:  272\nSave Me\nNow preparing masks number:  273\nSave Me\nNow preparing masks number:  274\nSave Me\nNow preparing masks number:  275\nSave Me\nNow preparing masks number:  276\nI am useless\nNow preparing masks number:  277\nSave Me\nNow preparing masks number:  278\nSave Me\nNow preparing masks number:  279\nSave Me\nNow preparing masks number:  280\nSave Me\nNow preparing masks number:  281\nSave Me\nNow preparing masks number:  282\nSave Me\nNow preparing masks number:  283\nSave Me\nNow preparing masks number:  284\nSave Me\nNow preparing masks number:  285\nSave Me\nNow preparing masks number:  286\nSave Me\nNow preparing masks number:  287\nSave Me\nNow preparing masks number:  288\nSave Me\nNow preparing masks number:  289\nSave Me\nNow preparing masks number:  290\nSave Me\nNow preparing masks number:  291\nSave Me\nNow preparing masks number:  292\nSave Me\nNow preparing masks number:  293\nSave Me\nNow preparing masks number:  294\nSave Me\nNow preparing masks number:  295\nSave Me\nNow preparing masks number:  296\nSave Me\nNow preparing masks number:  297\nSave Me\nNow preparing masks number:  298\nSave Me\nNow preparing masks number:  299\nSave Me\nNow preparing masks number:  300\nSave Me\nNow preparing masks number:  301\nSave Me\nNow preparing masks number:  302\nSave Me\nNow preparing masks number:  303\nSave Me\nNow preparing masks number:  304\nSave Me\nNow preparing masks number:  305\nSave Me\nNow preparing masks number:  306\nSave Me\nNow preparing masks number:  307\nSave Me\nNow preparing masks number:  308\nSave Me\nNow preparing masks number:  309\nSave Me\nNow preparing masks number:  310\nSave Me\nNow preparing masks number:  311\nSave Me\nNow preparing masks number:  312\nSave Me\nNow preparing masks number:  313\nI am useless\nNow preparing masks number:  314\nSave Me\nNow preparing masks number:  315\nSave Me\nNow preparing masks number:  316\nI am useless\nNow preparing masks number:  317\nSave Me\nNow preparing masks number:  318\nSave Me\nNow preparing masks number:  319\nSave Me\nNow preparing masks number:  320\nSave Me\nNow preparing masks number:  321\nSave Me\nNow preparing masks number:  322\nSave Me\nNow preparing masks number:  323\nSave Me\nNow preparing masks number:  324\nI am useless\nNow preparing masks number:  325\nSave Me\nNow preparing masks number:  326\nSave Me\nNow preparing masks number:  327\nSave Me\nNow preparing masks number:  328\nSave Me\nNow preparing masks number:  329\nSave Me\nNow preparing masks number:  330\nSave Me\nNow preparing masks number:  331\nSave Me\nNow preparing masks number:  332\nSave Me\nNow preparing masks number:  333\nSave Me\nNow preparing masks number:  334\nSave Me\nNow preparing masks number:  335\nSave Me\nNow preparing masks number:  336\nSave Me\nNow preparing masks number:  337\nSave Me\nNow preparing masks number:  338\nSave Me\nNow preparing masks number:  339\nSave Me\nNow preparing masks number:  340\nI am useless\nNow preparing masks number:  341\nSave Me\nNow preparing masks number:  342\nSave Me\nNow preparing masks number:  343\nSave Me\nNow preparing masks number:  344\nSave Me\nNow preparing masks number:  345\nSave Me\nNow preparing masks number:  346\nSave Me\nNow preparing masks number:  347\nSave Me\nNow preparing masks number:  348\nSave Me\nNow preparing masks number:  349\nSave Me\nNow preparing masks number:  350\nSave Me\nNow preparing masks number:  351\nSave Me\nNow preparing masks number:  352\nSave Me\nNow preparing masks number:  353\nSave Me\nNow preparing masks number:  354\nSave Me\nNow preparing masks number:  355\nSave Me\nNow preparing masks number:  356\nSave Me\nNow preparing masks number:  357\nSave Me\nNow preparing masks number:  358\nSave Me\nNow preparing masks number:  359\nSave Me\nNow preparing masks number:  360\nSave Me\nNow preparing masks number:  361\nSave Me\nNow preparing masks number:  362\nSave Me\nNow preparing masks number:  363\nSave Me\nNow preparing masks number:  364\nSave Me\nNow preparing masks number:  365\nSave Me\nNow preparing masks number:  366\nSave Me\nNow preparing masks number:  367\nSave Me\nNow preparing masks number:  368\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[6], line 21\u001b[0m\n\u001b[1;32m     18\u001b[0m temp_image_flair \u001b[38;5;241m=\u001b[39m nib\u001b[38;5;241m.\u001b[39mload(flair_list[img])\u001b[38;5;241m.\u001b[39mget_fdata()\n\u001b[1;32m     19\u001b[0m temp_image_flair \u001b[38;5;241m=\u001b[39m scaler\u001b[38;5;241m.\u001b[39mfit_transform(temp_image_flair\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, temp_image_flair\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]))\u001b[38;5;241m.\u001b[39mreshape(temp_image_flair\u001b[38;5;241m.\u001b[39mshape)\n\u001b[0;32m---> 21\u001b[0m temp_mask \u001b[38;5;241m=\u001b[39m nib\u001b[38;5;241m.\u001b[39mload(\u001b[43mmask_list\u001b[49m\u001b[43m[\u001b[49m\u001b[43mimg\u001b[49m\u001b[43m]\u001b[49m)\u001b[38;5;241m.\u001b[39mget_fdata()\n\u001b[1;32m     22\u001b[0m temp_mask \u001b[38;5;241m=\u001b[39m temp_mask\u001b[38;5;241m.\u001b[39mastype(np\u001b[38;5;241m.\u001b[39muint8)\n\u001b[1;32m     23\u001b[0m temp_mask[temp_mask\u001b[38;5;241m==\u001b[39m\u001b[38;5;241m4\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m3\u001b[39m  \u001b[38;5;66;03m# Reassign mask values 4 to 3\u001b[39;00m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"],"ename":"IndexError","evalue":"list index out of range","output_type":"error"}]},{"cell_type":"code","source":"# https://youtu.be/PNqnLbzdxwQ\n\"\"\"\nCustom data generator to work with BraTS2020 dataset.\nCan be used as a template to create your own custom data generators. \n\nNo image processing operations are performed here, just load data from local directory\nin batches. \n\n\"\"\"\n\n#from tifffile import imsave, imread\nimport os\nimport numpy as np\n\n\ndef load_img(img_dir, img_list):\n    images=[]\n    for i, image_name in enumerate(img_list):    \n        if (image_name.split('.')[1] == 'npy'):\n            \n            image = np.load(img_dir+image_name)\n                      \n            images.append(image)\n    images = np.array(images)\n    \n    return(images)\n\n\n\n\ndef imageLoader(img_dir, img_list, mask_dir, mask_list, batch_size):\n\n    L = len(img_list)\n\n    #keras needs the generator infinite, so we will use while true  \n    while True:\n\n        batch_start = 0\n        batch_end = batch_size\n\n        while batch_start < L:\n            limit = min(batch_end, L)\n                       \n            X = load_img(img_dir, img_list[batch_start:limit])\n            Y = load_img(mask_dir, mask_list[batch_start:limit])\n\n            yield (X,Y) #a tuple with two numpy arrays with batch_size samples     \n\n            batch_start += batch_size   \n            batch_end += batch_size\n\n############################################","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:35:12.004070Z","iopub.execute_input":"2024-04-16T11:35:12.004876Z","iopub.status.idle":"2024-04-16T11:35:12.014160Z","shell.execute_reply.started":"2024-04-16T11:35:12.004840Z","shell.execute_reply":"2024-04-16T11:35:12.013138Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"\n#Test the generator\n\nfrom matplotlib import pyplot as plt\nimport random\n\ntrain_img_dir = \"/kaggle/input/first/input_data_3channels/images/\"\ntrain_mask_dir = \"/kaggle/working/input_data_3channels/masks/\"\ntrain_img_list=os.listdir(train_img_dir)\ntrain_mask_list = os.listdir(train_mask_dir)\n\nbatch_size = 2\n\ntrain_img_datagen = imageLoader(train_img_dir, train_img_list, \n                                train_mask_dir, train_mask_list, batch_size)\n\n#Verify generator.... In python 3 next() is renamed as __next__()\nimg, msk = train_img_datagen.__next__()\n\n\nimg_num = random.randint(0,img.shape[0]-1)\ntest_img=img[img_num]\ntest_mask=msk[img_num]\ntest_mask=np.argmax(test_mask, axis=3)\n\nn_slice=random.randint(0, test_mask.shape[2])\nplt.figure(figsize=(12, 8))\n\nplt.subplot(221)\nplt.imshow(test_img[:,:,n_slice, 0], cmap='gray')\nplt.title('Image flair')\nplt.subplot(222)\nplt.imshow(test_img[:,:,n_slice, 1], cmap='gray')\nplt.title('Image t1ce')\nplt.subplot(223)\nplt.imshow(test_img[:,:,n_slice, 2], cmap='gray')\nplt.title('Image t2')\nplt.subplot(224)\nplt.imshow(test_mask[:,:,n_slice])\nplt.title('Mask')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:38:49.074729Z","iopub.execute_input":"2024-04-16T11:38:49.075097Z","iopub.status.idle":"2024-04-16T11:38:49.421528Z","shell.execute_reply.started":"2024-04-16T11:38:49.075068Z","shell.execute_reply":"2024-04-16T11:38:49.420298Z"},"trusted":true},"execution_count":13,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[13], line 29\u001b[0m\n\u001b[1;32m     26\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m8\u001b[39m))\n\u001b[1;32m     28\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m221\u001b[39m)\n\u001b[0;32m---> 29\u001b[0m plt\u001b[38;5;241m.\u001b[39mimshow(\u001b[43mtest_img\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43mn_slice\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m, cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgray\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     30\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mImage flair\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     31\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m222\u001b[39m)\n","\u001b[0;31mIndexError\u001b[0m: index 128 is out of bounds for axis 2 with size 128"],"ename":"IndexError","evalue":"index 128 is out of bounds for axis 2 with size 128","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# https://youtu.be/ScdCQqLtnis\n\"\"\"\n@author: Sreenivas Bhattiprolu\n\nConverted my standard 2D Unet to 3D. \n\n\"\"\"\nfrom keras.models import Model\nfrom keras.layers import Input, Conv3D, MaxPooling3D, concatenate, Conv3DTranspose, BatchNormalization, Dropout, Lambda\nfrom keras.optimizers import Adam\nfrom keras.metrics import MeanIoU\n\nkernel_initializer =  'he_uniform' #Try others if you want\n\n\n################################################################\ndef simple_unet_model(IMG_HEIGHT, IMG_WIDTH, IMG_DEPTH, IMG_CHANNELS, num_classes):\n#Build the model\n    inputs = Input((IMG_HEIGHT, IMG_WIDTH, IMG_DEPTH, IMG_CHANNELS))\n    #s = Lambda(lambda x: x / 255)(inputs)   #No need for this if we normalize our inputs beforehand\n    s = inputs\n\n    #Contraction path\n    c1 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(s)\n    c1 = Dropout(0.1)(c1)\n    c1 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c1)\n    p1 = MaxPooling3D((2, 2, 2))(c1)\n    \n    c2 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p1)\n    c2 = Dropout(0.1)(c2)\n    c2 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c2)\n    p2 = MaxPooling3D((2, 2, 2))(c2)\n     \n    c3 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p2)\n    c3 = Dropout(0.2)(c3)\n    c3 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c3)\n    p3 = MaxPooling3D((2, 2, 2))(c3)\n     \n    c4 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p3)\n    c4 = Dropout(0.2)(c4)\n    c4 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c4)\n    p4 = MaxPooling3D(pool_size=(2, 2, 2))(c4)\n     \n    c5 = Conv3D(256, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(p4)\n    c5 = Dropout(0.3)(c5)\n    c5 = Conv3D(256, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c5)\n    \n    #Expansive path \n    u6 = Conv3DTranspose(128, (2, 2, 2), strides=(2, 2, 2), padding='same')(c5)\n    u6 = concatenate([u6, c4])\n    c6 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u6)\n    c6 = Dropout(0.2)(c6)\n    c6 = Conv3D(128, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c6)\n     \n    u7 = Conv3DTranspose(64, (2, 2, 2), strides=(2, 2, 2), padding='same')(c6)\n    u7 = concatenate([u7, c3])\n    c7 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u7)\n    c7 = Dropout(0.2)(c7)\n    c7 = Conv3D(64, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c7)\n     \n    u8 = Conv3DTranspose(32, (2, 2, 2), strides=(2, 2, 2), padding='same')(c7)\n    u8 = concatenate([u8, c2])\n    c8 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u8)\n    c8 = Dropout(0.1)(c8)\n    c8 = Conv3D(32, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c8)\n     \n    u9 = Conv3DTranspose(16, (2, 2, 2), strides=(2, 2, 2), padding='same')(c8)\n    u9 = concatenate([u9, c1])\n    c9 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(u9)\n    c9 = Dropout(0.1)(c9)\n    c9 = Conv3D(16, (3, 3, 3), activation='relu', kernel_initializer=kernel_initializer, padding='same')(c9)\n     \n    outputs = Conv3D(num_classes, (1, 1, 1), activation='softmax')(c9)\n     \n    model = Model(inputs=[inputs], outputs=[outputs])\n    #compile model outside of this function to make it flexible. \n    model.summary()\n    \n    return model\n\n#Test if everything is working ok. \nmodel = simple_unet_model(128, 128, 128, 3, 4)\nprint(model.input_shape)\nprint(model.output_shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.848224Z","iopub.status.idle":"2024-04-16T11:28:29.848688Z","shell.execute_reply.started":"2024-04-16T11:28:29.848434Z","shell.execute_reply":"2024-04-16T11:28:29.848451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# https://youtu.be/ScdCQqLtnis\n\"\"\"\n@author: Sreenivas Bhattiprolu\n\nCode to train batches of cropped BraTS 2020 images using 3D U-net.\n\nPlease get the data ready and define custom data gnerator using the other\nfiles in this directory.\n\nImages are expected to be 128x128x128x3 npy data (3 corresponds to the 3 channels for \n                                                  test_image_flair, test_image_t1ce, test_image_t2)\nChange the U-net input shape based on your input dataset shape (e.g. if you decide to only se 2 channels or all 4 channels)\n\nMasks are expected to be 128x128x128x3 npy data (4 corresponds to the 4 classes / labels)\n\n\nYou can change input image sizes to customize for your computing resources.\n\"\"\"\n\n\nimport os\nimport numpy as np\n#import tensorflow as tf\nimport keras\nfrom matplotlib import pyplot as plt\nimport glob\nimport random\n\n\n\n####################################################\ntrain_img_dir = \"/kaggle/input/notebook34d345dfcf/input_data_3channels/images/\"\ntrain_mask_dir = \"/kaggle/input/masks/input_data_3channels/masks/\"\n\nimg_list = os.listdir(train_img_dir)\nmsk_list = os.listdir(train_mask_dir)\n\nnum_images = len(os.listdir(train_img_dir))\n\nimg_num = random.randint(0,num_images-1)\ntest_img = np.load(train_img_dir+img_list[img_num])\ntest_mask = np.load(train_mask_dir+msk_list[img_num])\ntest_mask = np.argmax(test_mask, axis=3)\n\nn_slice=random.randint(0, test_mask.shape[2])\nplt.figure(figsize=(12, 8))\n\nplt.subplot(221)\nplt.imshow(test_img[:,:,n_slice, 0], cmap='gray')\nplt.title('Image flair')\nplt.subplot(222)\nplt.imshow(test_img[:,:,n_slice, 1], cmap='gray')\nplt.title('Image t1ce')\nplt.subplot(223)\nplt.imshow(test_img[:,:,n_slice, 2], cmap='gray')\nplt.title('Image t2')\nplt.subplot(224)\nplt.imshow(test_mask[:,:,n_slice])\nplt.title('Mask')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.850136Z","iopub.status.idle":"2024-04-16T11:28:29.850600Z","shell.execute_reply.started":"2024-04-16T11:28:29.850350Z","shell.execute_reply":"2024-04-16T11:28:29.850369Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n######\ntrain_img_dir = \"/kaggle/input/notebook34d345dfcf/input_data_3channels/images/\"\ntrain_mask_dir = \"/kaggle/input/masks/input_data_3channels/masks/\"\n\ntrain_img_list=os.listdir(train_img_dir)\ntrain_mask_list = os.listdir(train_mask_dir)\n\n\n##################################\n\n########################################################################\n\n########################################################################\nbatch_size = 2\n\ntrain_img_datagen = imageLoader(train_img_dir, train_img_list, \n                                train_mask_dir, train_mask_list, batch_size)\n\n#Verify generator.... In python 3 next() is renamed as __next__()\nimg, msk = train_img_datagen.__next__()\n\nimg_num = random.randint(0,img.shape[0]-1)\ntest_img=img[img_num]\ntest_mask=msk[img_num]\ntest_mask=np.argmax(test_mask, axis=3)\n\nn_slice=random.randint(0, test_mask.shape[2])\nplt.figure(figsize=(12, 8))\n\nplt.subplot(221)\nplt.imshow(test_img[:,:,n_slice, 0], cmap='gray')\nplt.title('Image flair')\nplt.subplot(222)\nplt.imshow(test_img[:,:,n_slice, 1], cmap='gray')\nplt.title('Image t1ce')\nplt.subplot(223)\nplt.imshow(test_img[:,:,n_slice, 2], cmap='gray')\nplt.title('Image t2')\nplt.subplot(224)\nplt.imshow(test_mask[:,:,n_slice])\nplt.title('Mask')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.851811Z","iopub.status.idle":"2024-04-16T11:28:29.852266Z","shell.execute_reply.started":"2024-04-16T11:28:29.852025Z","shell.execute_reply":"2024-04-16T11:28:29.852043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install segmentation-models-3D\n\n###########################################################################\n#Define loss, metrics and optimizer to be used for training\nwt0, wt1, wt2, wt3 = 0.25,0.25,0.25,0.25\nimport segmentation_models_3D as sm\ndice_loss = sm.losses.DiceLoss(class_weights=np.array([wt0, wt1, wt2, wt3])) \nfocal_loss = sm.losses.CategoricalFocalLoss()\ntotal_loss = dice_loss + (1 * focal_loss)\n\nmetrics = ['accuracy', sm.metrics.IOUScore(threshold=0.5)]\n\nLR = 0.0001\noptim = keras.optimizers.Adam(LR)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.853512Z","iopub.status.idle":"2024-04-16T11:28:29.853964Z","shell.execute_reply.started":"2024-04-16T11:28:29.853732Z","shell.execute_reply":"2024-04-16T11:28:29.853751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n#######################################################################\n#Fit the model \n\nsteps_per_epoch = len(train_img_list)//batch_size\n\nmodel = simple_unet_model(IMG_HEIGHT=128, \n                          IMG_WIDTH=128, \n                          IMG_DEPTH=128, \n                          IMG_CHANNELS=3, \n                          num_classes=4)\n\nmodel.compile(optimizer = optim, loss=total_loss, metrics=metrics)\nprint(model.summary())\n\nprint(model.input_shape)\nprint(model.output_shape)\n\nhistory=model.fit(train_img_datagen,\n          steps_per_epoch=steps_per_epoch,\n          epochs=25,\n          verbose=1,\n          )\n\nmodel.save('brats_3d.keras')\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.855151Z","iopub.status.idle":"2024-04-16T11:28:29.855610Z","shell.execute_reply.started":"2024-04-16T11:28:29.855362Z","shell.execute_reply":"2024-04-16T11:28:29.855379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n#plot the training and validation IoU and loss at each epoch\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, 'y', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nplt.plot(epochs, acc, 'y', label='Training accuracy')\nplt.plot(epochs, val_acc, 'r', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.856747Z","iopub.status.idle":"2024-04-16T11:28:29.857174Z","shell.execute_reply.started":"2024-04-16T11:28:29.856954Z","shell.execute_reply":"2024-04-16T11:28:29.856972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#################################################\nfrom keras.models import load_model\n\n#Load model for prediction or continue training\n\n#For continuing training....\n#The following gives an error: Unknown loss function: dice_loss_plus_1focal_loss\n#This is because the model does not save loss function and metrics. So to compile and \n#continue training we need to provide these as custom_objects.\nmy_model = load_model('saved_models/brats_3d_100epochs_simple_unet_weighted_dice.hdf5')\n\n#So let us add the loss as custom object... but the following throws another error...\n#Unknown metric function: iou_score\nmy_model = load_model('saved_models/brats_3d_100epochs_simple_unet_weighted_dice.hdf5', \n                      custom_objects={'dice_loss_plus_1focal_loss': total_loss})\n\n#Now, let us add the iou_score function we used during our initial training\nmy_model = load_model('saved_models/brats_3d_100epochs_simple_unet_weighted_dice.hdf5', \n                      custom_objects={'dice_loss_plus_1focal_loss': total_loss,\n                                      'iou_score':sm.metrics.IOUScore(threshold=0.5)})\n\n#Now all set to continue the training process. \nhistory2=my_model.fit(train_img_datagen,\n          steps_per_epoch=steps_per_epoch,\n          epochs=1,\n          verbose=1,\n          validation_data=val_img_datagen,\n          validation_steps=val_steps_per_epoch,\n          )","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.858283Z","iopub.status.idle":"2024-04-16T11:28:29.858739Z","shell.execute_reply.started":"2024-04-16T11:28:29.858514Z","shell.execute_reply":"2024-04-16T11:28:29.858533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n#For predictions you do not need to compile the model, so ...\nmy_model = load_model('saved_models/brats_3d_100epochs_simple_unet_weighted_dice.hdf5', \n                      compile=False)\n\n\n#Verify IoU on a batch of images from the test dataset\n#Using built in keras function for IoU\n#Only works on TF > 2.0\nfrom keras.metrics import MeanIoU\n\nbatch_size=8 #Check IoU for a batch of images\ntest_img_datagen = imageLoader(val_img_dir, val_img_list, \n                                val_mask_dir, val_mask_list, batch_size)\n\n#Verify generator.... In python 3 next() is renamed as __next__()\ntest_image_batch, test_mask_batch = test_img_datagen.__next__()\n\ntest_mask_batch_argmax = np.argmax(test_mask_batch, axis=4)\ntest_pred_batch = my_model.predict(test_image_batch)\ntest_pred_batch_argmax = np.argmax(test_pred_batch, axis=4)\n\nn_classes = 4\nIOU_keras = MeanIoU(num_classes=n_classes)  \nIOU_keras.update_state(test_pred_batch_argmax, test_mask_batch_argmax)\nprint(\"Mean IoU =\", IOU_keras.result().numpy())\n\n#############################################\n#Predict on a few test images, one at a time\n#Try images: \nimg_num = 82\n\ntest_img = np.load(\"BraTS2020_TrainingData/input_data_128/val/images/image_\"+str(img_num)+\".npy\")\n\ntest_mask = np.load(\"BraTS2020_TrainingData/input_data_128/val/masks/mask_\"+str(img_num)+\".npy\")\ntest_mask_argmax=np.argmax(test_mask, axis=3)\n\ntest_img_input = np.expand_dims(test_img, axis=0)\ntest_prediction = my_model.predict(test_img_input)\ntest_prediction_argmax=np.argmax(test_prediction, axis=4)[0,:,:,:]\n\n\n# print(test_prediction_argmax.shape)\n# print(test_mask_argmax.shape)\n# print(np.unique(test_prediction_argmax))\n\n\n#Plot individual slices from test predictions for verification\nfrom matplotlib import pyplot as plt\nimport random\n\n#n_slice=random.randint(0, test_prediction_argmax.shape[2])\nn_slice = 55\nplt.figure(figsize=(12, 8))\nplt.subplot(231)\nplt.title('Testing Image')\nplt.imshow(test_img[:,:,n_slice,1], cmap='gray')\nplt.subplot(232)\nplt.title('Testing Label')\nplt.imshow(test_mask_argmax[:,:,n_slice])\nplt.subplot(233)\nplt.title('Prediction on test image')\nplt.imshow(test_prediction_argmax[:,:, n_slice])\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T11:28:29.859977Z","iopub.status.idle":"2024-04-16T11:28:29.860402Z","shell.execute_reply.started":"2024-04-16T11:28:29.860184Z","shell.execute_reply":"2024-04-16T11:28:29.860201Z"},"trusted":true},"execution_count":null,"outputs":[]}]}